

open Config

module Default = struct

   let tables (params:params) (code:Pla.t) : Pla.t =
      let file = String.uppercase params.output in
      {pla|
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef <#file#s>_TABLES_H
#define <#file#s>_TABLES_H


<#code#>

#endif // <#file#s>_TABLES_H
|pla}

   let header (params:params) (code:Pla.t) : Pla.t =
      let file = String.uppercase params.output in
      let tables = params.output in
      {pla|
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#ifndef <#file#s>_H
#define <#file#s>_H
#include <stdint.h>
#include <math.h>
#include "vultin.h"
#include "<#tables#s>.tables.h"

<#code#>

#endif // <#file#s>_H
|pla}

   let implementation (params:params) (code:Pla.t) : Pla.t =
      let output = params.output in
      {pla|
/* Code automatically generated by Vult https://github.com/modlfo/vult */
#include "<#output#s>.h"

<#code#>
|pla}

   let get (params:params) (header_code:Pla.t) (impl_code:Pla.t) (tables_code:Pla.t) : (Pla.t * FileKind.t) list =
      [
         header params header_code, FileKind.ExtOnly "h";
         implementation params impl_code, FileKind.ExtOnly "cpp";
         tables params tables_code, FileKind.ExtOnly "tables.h"
      ]
end

let apply (params:params) (header_code:Pla.t) (impl_code:Pla.t) (tables:Pla.t) : (Pla.t * FileKind.t) list =
   let template =
      match params.template with
      | "none"     -> Default.get
      | "default"  -> Default.get
      | "teensy"   -> TeensyAudio.get
      | "pd"       -> Pd.get
      | "max"      -> Max.get
      | "modelica" -> Modelica.get
      | "performance" -> Performance.getC
      | t -> failwith (Printf.sprintf "The template '%s' is not available for this generator" t)
   in
   template params header_code impl_code tables

